#!/bin/bash
# lib/commands/context.sh - Commande SILK context (FIXED)

# V√©rification chargement des d√©pendances
if [[ "${SILK_CORE_UTILS_LOADED:-false}" != "true" ]]; then
    echo "‚ùå Module core/utils requis" >&2
    exit 1
fi

if [[ "${SILK_CORE_VAULT_LOADED:-false}" != "true" ]]; then
    echo "‚ùå Module core/vault requis" >&2
    exit 1
fi

# === CONSTANTES MODULE ===
readonly CONTEXT_OUTPUT_DIR="outputs/context"
readonly CONTEXT_UNIFIED_FILE="silk-context.md"

# === PROMPTS PR√âD√âFINIS ===
declare -A PREDEFINED_PROMPTS=(
    ["coherence"]="Analyse la coh√©rence narrative, temporelle et psychologique de ces chapitres. Identifie les incoh√©rences, contradictions ou √©l√©ments qui n√©cessitent une harmonisation."
    ["revision"]="R√©vise ces chapitres en te concentrant sur l'am√©lioration du style, du rythme narratif et de la fluidit√©. Propose des am√©liorations concr√®tes pour enrichir le texte."
    ["characters"]="Analyse le d√©veloppement des personnages dans ces chapitres. √âvalue la cr√©dibilit√© psychologique, l'√©volution des arcs narratifs et la coh√©rence des motivations."
    ["dialogue"]="Examine les dialogues dans ces chapitres. Am√©liore l'authenticit√©, la diff√©renciation des voix et l'efficacit√© narrative des √©changes."
    ["plot"]="Analyse la progression de l'intrigue dans ces chapitres. √âvalue le rythme, les tensions, les r√©v√©lations et l'engagement du lecteur."
    ["style"]="Analyse le style d'√©criture de ces chapitres. Propose des am√©liorations pour la voix narrative, les descriptions et l'atmosph√®re g√©n√©rale."
    ["continuity"]="V√©rifie la continuit√© narrative entre ces chapitres. Identifie les ruptures de rythme, les transitions abruptes ou les √©l√©ments manquants."
    ["editing"]="Effectue une r√©vision √©ditoriale compl√®te de ces chapitres : syntaxe, grammaire, r√©p√©titions, clart√© et impact."
)

# === FONCTION PRINCIPALE ===
cmd_context() {
    local prompt_text=""
    local prompt_source=""
    local chapter_range="1-30"
    local mode="normal"
    local include_timeline=false
    local include_wordcount=false
    local timeline_file=""
    local backstory_file=""
    local prompt_file="prompt.md"

    # Parser arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                log_info "debug activ√© ?"
                log_debug "debug activ√©"
                show_context_help
                return 0
                ;;
            -p|--prompt)
                if [[ $# -lt 2 ]]; then
                    log_error "Option -p/--prompt n√©cessite un argument"
                    return 1
                fi
                local predefined_key="$2"
                if [[ -n "${PREDEFINED_PROMPTS[$predefined_key]:-}" ]]; then
                    prompt_text="${PREDEFINED_PROMPTS[$predefined_key]}"
                    prompt_source="predefined:$predefined_key"
                    log_debug "Prompt pr√©d√©fini: $predefined_key"
                else
                    log_error "Prompt pr√©d√©fini inconnu: $predefined_key"
                    echo "üí° Prompts disponibles: ${!PREDEFINED_PROMPTS[*]}"
                    return 1
                fi
                shift 2
                ;;
            --withpromptfile)
                if [[ $# -ge 2 && "$2" != -* ]]; then
                    prompt_file="$2"
                    shift 2
                else
                    # Utiliser prompt.md par d√©faut
                    shift
                fi

                if [[ -f "$prompt_file" ]]; then
                    prompt_text=$(cat "$prompt_file")
                    prompt_source="file:$prompt_file"
                    log_debug "Prompt depuis fichier: $prompt_file"
                else
                    log_error "Fichier prompt non trouv√©: $prompt_file"
                    return 1
                fi
                ;;
            -ch|--chapters)
                if [[ $# -lt 2 ]]; then
                    log_error "Option -ch/--chapters n√©cessite un argument"
                    return 1
                fi
                chapter_range="$2"
                log_debug "Range chapitres: $chapter_range"
                shift 2
                ;;
            --timeline|-tl)
                include_timeline=true
                if [[ $# -ge 2 && "$2" != -* ]]; then
                    timeline_file="$2"
                    shift 2
                else
                    shift
                fi
                log_debug "Timeline incluse: ${timeline_file:-auto}"
                ;;
            --wordcount|-wc)
                include_wordcount=true
                log_debug "Word count inclus"
                shift
                ;;
            --mode)
                if [[ $# -lt 2 ]]; then
                    log_error "Option --mode n√©cessite un argument"
                    return 1
                fi
                mode="$2"
                case "$mode" in
                    nocontext|normal|full) ;;
                    *)
                        log_error "Mode invalide: $mode (nocontext, normal, full)"
                        return 1
                        ;;
                esac
                log_debug "Mode contexte: $mode"
                shift 2
                ;;
            --backstory)
                if [[ $# -ge 2 && "$2" != -* ]]; then
                    backstory_file="$2"
                    shift 2
                else
                    # Chercher fichier backstory par d√©faut
                    shift
                fi
                log_debug "Backstory: ${backstory_file:-auto}"
                ;;
            -*)
                log_error "Option inconnue: $1"
                show_context_help
                return 1
                ;;
            *)
                # Traiter comme prompt direct si pas encore d√©fini
                if [[ -z "$prompt_text" ]]; then
                    prompt_text="$1"
                    prompt_source="direct"
                    log_debug "Prompt direct: $1"
                fi
                shift
                ;;
        esac
    done

    # Valider qu'un prompt est d√©fini
    if [[ -z "$prompt_text" ]]; then
        log_error "Aucun prompt fourni. Utilisez:"
        echo "  silk context \"votre question\""
        echo "  silk context -p coherence"
        echo "  silk context --withpromptfile prompt.md"
        return 1
    fi

    # V√©rifier contexte vault
    ensure_silk_context

    # Normaliser le range
    local original_range="$chapter_range"
    chapter_range=$(normalize_chapter_range "$chapter_range")

    if [[ "$original_range" != "$chapter_range" ]]; then
        log_debug "Range normalis√©: $original_range -> $chapter_range"
    fi

    # Auto-d√©tection fichiers si non sp√©cifi√©s
    auto_detect_context_files timeline_file backstory_file

    # G√©n√©rer contexte unifi√©
    local start_time=$(start_timer)

    log_info "üï∏Ô∏è SILK tisse votre contexte unifi√©..."

    # FIX: Utiliser des cha√Ænes vides pour param√®tres optionnels
    generate_unified_context "$prompt_text" "$prompt_source" "$chapter_range" "$mode" "$include_timeline" "$include_wordcount" "${timeline_file:-}" "${backstory_file:-}" "$original_range"

    local duration=$(end_timer "$start_time")

    # Rapport final
    show_unified_report "$mode" "$chapter_range" "$duration" "$prompt_source"

    return 0
}

# === AIDE CONTEXTE ===
show_context_help() {
    cat << 'HELP'
üï∏Ô∏è SILK CONTEXT - G√©n√©ration contexte unifi√© pour LLM

USAGE:
  silk context "votre question"                    # Prompt direct
  silk context -p NOM_PROMPT [OPTIONS]             # Prompt pr√©d√©fini
  silk context --withpromptfile [FICHIER] [OPTIONS] # Prompt depuis fichier

OPTIONS PROMPT:
  -p, --prompt NAME             Utiliser prompt pr√©d√©fini
  --withpromptfile [FILE]       Prompt depuis fichier (d√©faut: prompt.md)

OPTIONS CONTENU:
  -ch, --chapters RANGE         Chapitres (ex: 1-4, 20,28,30, all)
  --mode MODE                   Contexte: nocontext|normal|full
  --timeline, -tl [FILE]        Inclure timeline (auto-d√©tection)
  --wordcount, -wc              Inclure statistiques mots
  --backstory [FILE]            Fichier backstory sp√©cifique
  -h, --help                    Afficher cette aide

PROMPTS PR√âD√âFINIS:
  coherence     Analyse coh√©rence narrative et temporelle
  revision      R√©vision style et rythme narratif
  characters    D√©veloppement et psychologie personnages
  dialogue      Am√©lioration authenticit√© des dialogues
  plot          Progression intrigue et tensions
  style         Analyse et am√©lioration style d'√©criture
  continuity    V√©rification continuit√© entre chapitres
  editing       R√©vision √©ditoriale compl√®te

MODES CONTEXTE:
  nocontext     Prompt + manuscrit seulement
  normal        + personnages principaux + concepts essentiels
  full          + tous personnages + lieux + worldbuilding + timeline

EXEMPLES:
  silk context "R√©vise le dialogue d'Emma au chapitre 15"
  silk context -p coherence --chapters 1-10
  silk context -p characters --mode full
  silk context --withpromptfile analyse-complete.md -ch 20,25,30
  silk context --withpromptfile --timeline --wc --mode full

FORMATS CHAPITRES:
  10-15         Range (10, 11, 12, 13, 14, 15)
  28            Chapitre unique
  20,28,30      Liste sp√©cifique
  5,12,18-20    Mixte (5, 12, 18, 19, 20)
  all           Tous les chapitres

FICHIER G√âN√âR√â:
  outputs/context/silk-context.md    Fichier unifi√© pr√™t pour LLM

üï∏Ô∏è SILK weaves prompt + context + manuscript into one unified file.
HELP
}

# === AUTO-D√âTECTION FICHIERS ===
auto_detect_context_files() {
    local -n timeline_ref=$1
    local -n backstory_ref=$2

    # Auto-d√©tection timeline si non sp√©cifi√©e
    if [[ -z "$timeline_ref" ]]; then
        local timeline_candidates=(
            "07-timeline/timeline-rebuild-4.md"
            "07-timeline/timeline.md"
            "timeline.md"
            "Timeline.md"
        )

        for candidate in "${timeline_candidates[@]}"; do
            if [[ -f "$candidate" ]]; then
                timeline_ref="$candidate"
                log_debug "Timeline auto-d√©tect√©e: $candidate"
                break
            fi
        done
    fi

    # Auto-d√©tection backstory si non sp√©cifi√©e
    if [[ -z "$backstory_ref" ]]; then
        local backstory_candidates=(
            "backstory.md"
            "Backstory.md"
            "04-Concepts/backstory.md"
            "10-Lore/backstory.md"
        )

        for candidate in "${backstory_candidates[@]}"; do
            if [[ -f "$candidate" ]]; then
                backstory_ref="$candidate"
                log_debug "Backstory auto-d√©tect√©e: $candidate"
                break
            fi
        done
    fi
}

# === G√âN√âRATION CONTEXTE UNIFI√â ===
generate_unified_context() {
    local prompt_text="$1"
    local prompt_source="$2"
    local chapter_range="$3"
    local mode="$4"
    local include_timeline="$5"
    local include_wordcount="$6"
    local timeline_file="$7"
    local backstory_file="$8"
    local original_range="$9"

    ensure_directory "$CONTEXT_OUTPUT_DIR"

    local output_file="${CONTEXT_OUTPUT_DIR}/${CONTEXT_UNIFIED_FILE}"

    log_info "G√©n√©ration contexte unifi√© (mode: $mode, chapitres: $chapter_range)"

    # === 1. HEADER ET PROMPT ===
    {
        echo "# üï∏Ô∏è SILK CONTEXTE UNIFI√â"
        echo
        echo "**G√©n√©r√© le:** $(date '+%d/%m/%Y √† %H:%M:%S')"
        echo "**Mode:** $mode"
        echo "**Chapitres:** $chapter_range"
        echo "**Source prompt:** $prompt_source"
        echo
        echo "---"
        echo
        echo "# üìã PROMPT"
        echo
        echo "$prompt_text"
        echo
        echo "---"
        echo
    } > "$output_file"

    # === 2. CONTEXTE M√âTADONN√âES ===
    if [[ "$mode" != "nocontext" ]]; then
        add_unified_context "$output_file" "$mode" "$chapter_range" "$timeline_file" "$backstory_file"
    fi

    # === 3. MANUSCRIT ===
    add_unified_manuscript "$output_file" "$chapter_range" "$include_timeline" "$include_wordcount" "$timeline_file"

    log_success "Contexte unifi√© g√©n√©r√©: $output_file"
}

# === AJOUT CONTEXTE M√âTADONN√âES ===
add_unified_context() {
    local output_file="$1"
    local mode="$2"
    local chapter_range="$3"
    local timeline_file="$4"
    local backstory_file="$5"

    {
        echo "# üß† CONTEXTE PROJET"
        echo
        echo "## üìÇ Structure SILK"
        echo "- **01-Manuscrit/**: $(ls 01-Manuscrit/*.md 2>/dev/null | wc -l) chapitres r√©dig√©s"
        echo "- **02-Personnages/**: $(find 02-Personnages -name "*.md" 2>/dev/null | wc -l) fiches personnages"
        echo "- **04-Concepts/**: $(ls 04-Concepts/*.md 2>/dev/null | wc -l) m√©caniques narratives"
        echo "- **07-timeline/**: $(ls 07-timeline/*.md 2>/dev/null | wc -l) chronologies"
        echo
    } >> "$output_file"

    # Backstory (mode normal et full)
    if [[ "$mode" == "normal" || "$mode" == "full" ]] && [[ -n "$backstory_file" && -f "$backstory_file" ]]; then
        add_backstory_section "$output_file" "$backstory_file"
    fi

    # Concepts (mode normal et full)
    if [[ "$mode" == "normal" || "$mode" == "full" ]]; then
        add_concepts_section "$output_file"
    fi

    # Personnages selon mode
    add_characters_section "$output_file" "$mode"

    # Timeline (mode full seulement)
    if [[ "$mode" == "full" ]] && [[ -n "$timeline_file" && -f "$timeline_file" ]]; then
        add_timeline_section "$output_file" "$timeline_file"
    fi

    # Lieux (mode full seulement)
    if [[ "$mode" == "full" ]]; then
        add_locations_section "$output_file"
    fi

    # Worldbuilding (mode full seulement)
    if [[ "$mode" == "full" ]]; then
        add_worldbuilding_section "$output_file"
    fi

    # M√©tadonn√©es chapitres concern√©s (tous modes)
    add_chapter_metadata_section "$output_file" "$chapter_range"
}

# === AJOUT MANUSCRIT ===
add_unified_manuscript() {
    local output_file="$1"
    local chapter_range="$2"
    local include_timeline="$3"
    local include_wordcount="$4"
    local timeline_file="$5"

    {
        echo "---"
        echo
        echo "# üìñ MANUSCRIT"
        echo
    } >> "$output_file"

    # Timeline si demand√©e
    if [[ "$include_timeline" == "true" ]] && [[ -n "$timeline_file" && -f "$timeline_file" ]]; then
        add_timeline_to_manuscript "$output_file" "$timeline_file"
    fi

    # Word count si demand√©
    if [[ "$include_wordcount" == "true" ]]; then
        add_wordcount_to_manuscript "$output_file"
    fi

    # Contenu chapitres
    {
        echo "## Chapitres s√©lectionn√©s"
        echo
    } >> "$output_file"

    extract_chapters_content "$chapter_range" >> "$output_file"
}

# === SECTIONS CONTEXTE ===
add_backstory_section() {
    local output_file="$1"
    local backstory_file="$2"

    {
        echo "## üìö Backstory"
        echo
        cat "$backstory_file"
        echo
    } >> "$output_file"

    log_debug "Backstory ajout√©e: $backstory_file"
}

add_concepts_section() {
    local output_file="$1"

    if [[ $(ls 04-Concepts/*.md 2>/dev/null | wc -l) -gt 0 ]]; then
        echo "## üß† Concepts narratifs" >> "$output_file"
        echo >> "$output_file"

        for file in 04-Concepts/*.md; do
            if [[ -f "$file" ]]; then
                {
                    echo "### $(basename "$file" .md)"
                    echo
                    cat "$file"
                    echo
                } >> "$output_file"
            fi
        done
    fi
}

add_characters_section() {
    local output_file="$1"
    local mode="$2"

    echo "## üë• Personnages" >> "$output_file"
    echo >> "$output_file"

    # Trio principal (tous modes sauf nocontext)
    if [[ "$mode" != "nocontext" ]]; then
        echo "### üåü Trio principal" >> "$output_file"
        for file in 02-Personnages/{Emma,Max,Yasmine}.md; do
            if [[ -f "$file" ]]; then
                {
                    echo
                    echo "#### $(basename "$file" .md)"
                    cat "$file"
                    echo
                } >> "$output_file"
            fi
        done
    fi

    # Personnages principaux (mode normal et full)
    if [[ "$mode" == "normal" || "$mode" == "full" ]]; then
        if [[ -d "02-Personnages/Principaux" ]] && [[ $(ls 02-Personnages/Principaux/*.md 2>/dev/null | wc -l) -gt 0 ]]; then
            echo "### üéØ Personnages principaux" >> "$output_file"
            for file in 02-Personnages/Principaux/*.md; do
                if [[ -f "$file" ]]; then
                    {
                        echo
                        echo "#### $(basename "$file" .md)"
                        cat "$file"
                        echo
                    } >> "$output_file"
                fi
            done
        fi
    fi

    # Personnages secondaires (mode full seulement)
    if [[ "$mode" == "full" ]]; then
        if [[ -d "02-Personnages/Secondaires" ]]; then
            echo "### üë• Personnages secondaires" >> "$output_file"

            # Parcourir tous les fichiers dans Secondaires/ et ses sous-dossiers
            find 02-Personnages/Secondaires -name "*.md" 2>/dev/null | while read -r file; do
                if [[ -f "$file" ]]; then
                    local relative_path=$(echo "$file" | sed 's|02-Personnages/Secondaires/||')
                    {
                        echo
                        echo "#### $relative_path"
                        cat "$file"
                        echo
                    } >> "$output_file"
                fi
            done
        fi
    fi
}

add_timeline_section() {
    local output_file="$1"
    local timeline_file="$2"

    {
        echo "## üìÖ Timeline compl√®te"
        echo
        cat "$timeline_file"
        echo
    } >> "$output_file"

    log_debug "Timeline ajout√©e: $timeline_file"
}

add_locations_section() {
    local output_file="$1"

    if [[ $(ls 03-Lieux/*.md 2>/dev/null | wc -l) -gt 0 ]]; then
        echo "## üó∫Ô∏è Lieux" >> "$output_file"
        echo >> "$output_file"

        for file in 03-Lieux/*.md; do
            if [[ -f "$file" ]]; then
                {
                    echo "### $(basename "$file" .md)"
                    echo
                    cat "$file"
                    echo
                } >> "$output_file"
            fi
        done
    fi
}

add_worldbuilding_section() {
    local output_file="$1"

    # Worldbuilding pour projets fantasy
    if [[ -d "05-Worldbuilding" ]] && [[ $(ls 05-Worldbuilding/*.md 2>/dev/null | wc -l) -gt 0 ]]; then
        echo "## üåç Worldbuilding" >> "$output_file"
        echo >> "$output_file"

        for file in 05-Worldbuilding/*.md; do
            if [[ -f "$file" ]]; then
                {
                    echo "### $(basename "$file" .md)"
                    echo
                    cat "$file"
                    echo
                } >> "$output_file"
            fi
        done
    fi

    # Lore g√©n√©ral
    if [[ -d "10-Lore" ]] && [[ $(ls 10-Lore/*.md 2>/dev/null | wc -l) -gt 0 ]]; then
        echo "## üìñ Lore" >> "$output_file"
        echo >> "$output_file"

        for file in 10-Lore/*.md; do
            if [[ -f "$file" ]] && [[ "$(basename "$file")" != "anciens_chapitres" ]]; then
                {
                    echo "### $(basename "$file" .md)"
                    echo
                    cat "$file"
                    echo
                } >> "$output_file"
            fi
        done
    fi
}

add_chapter_metadata_section() {
    local output_file="$1"
    local chapter_range="$2"

    {
        echo "## üìã M√©tadonn√©es chapitres concern√©s"
        echo
    } >> "$output_file"

    for file in 01-Manuscrit/*.md; do
        if [[ -f "$file" ]] && [[ $(wc -l < "$file") -gt 15 ]]; then
            local chapter_num=$(extract_chapter_number "$file")

            if is_chapter_in_range "$chapter_num" "$chapter_range"; then
                {
                    echo "### $(basename "$file" .md)"
                    echo
                    # Extraire m√©tadonn√©es (avant marqueur manuscrit)
                    extract_chapter_metadata "$file"
                    echo
                } >> "$output_file"
            fi
        fi
    done
}

add_timeline_to_manuscript() {
    local output_file="$1"
    local timeline_file="$2"

    {
        echo "## üìÖ Timeline principale"
        echo
        cat "$timeline_file"
        echo
    } >> "$output_file"

    log_debug "Timeline ajout√©e au manuscrit: $timeline_file"
}

add_wordcount_to_manuscript() {
    local output_file="$1"

    {
        echo "## üìä Statistiques manuscrit"
        echo
        echo '```'

        # CORRECTION: Trouver le chemin vers silk depuis le projet
        local silk_cmd=""
        if [[ -x "../silk" ]]; then
            silk_cmd="../silk"
        elif [[ -x "../../silk" ]]; then
            silk_cmd="../../silk"
        elif command -v silk &> /dev/null; then
            silk_cmd="silk"
        fi

        if [[ -n "$silk_cmd" ]] && is_silk_project; then
            # Utiliser le script SILK wordcount en mode summary
            local wordcount_output
            if wordcount_output=$($silk_cmd wordcount --summary 2>&1); then
                echo "$wordcount_output"
            else
                echo "Erreur lors du calcul des statistiques:"
                echo "$wordcount_output"
            fi
        else
            echo "Statistiques SILK non disponibles"
            echo "Total chapitres manuscrit: $(ls 01-Manuscrit/*.md 2>/dev/null | wc -l)"

            # Calcul simple sans silk
            local total_words=0
            for file in 01-Manuscrit/*.md; do
                if [[ -f "$file" ]] && grep -q "$MANUSCRIPT_SEPARATOR" "$file"; then
                    local words=$(sed -n "/${MANUSCRIPT_SEPARATOR}/,\$p" "$file" | tail -n +2 | wc -w)
                    total_words=$((total_words + words))
                fi
            done
            echo "Total mots approximatif: $total_words"
        fi

        echo '```'
        echo
    } >> "$output_file"

    log_debug "Word count ajout√© au manuscrit"
}

# === EXTRACTION CONTENU CHAPITRES ===
extract_chapters_content() {
    local chapter_range="$1"
    local chapters_included=0
    local chapters_excluded=0

    log_debug "Extraction chapitres pour range: $chapter_range"

    # Temporairement d√©sactiver errexit pour cette section
    set +e

    for file in 01-Manuscrit/*.md; do
        if [[ -f "$file" ]] && [[ $(wc -l < "$file") -gt 15 ]]; then
            local chapter_num=$(extract_chapter_number "$file")

            if is_chapter_in_range "$chapter_num" "$chapter_range"; then
                log_debug "‚úÖ INCLUS: $(basename "$file") (Ch$chapter_num)"
                echo "### $(basename "$file" .md)"
                echo
                extract_manuscript_content "$file"
                echo
                ((chapters_included++))
            else
                ((chapters_excluded++))
                log_debug "‚ùå EXCLU: $(basename "$file") (Ch$chapter_num)"
            fi
        fi
    done

    # R√©activer errexit
    set -e

    log_debug "Chapitres: $chapters_included inclus, $chapters_excluded exclus"

    # Stocker stats pour le rapport
    export SILK_CONTEXT_INCLUDED="$chapters_included"
    export SILK_CONTEXT_EXCLUDED="$chapters_excluded"
}

extract_chapter_metadata() {
    local file="$1"
    local marker="${MANUSCRIPT_SEPARATOR}"

    # Extraire tout ce qui est avant le marqueur manuscrit
    if grep -q "$marker" "$file"; then
        sed "/$marker/,\$d" "$file"
    else
        # Si pas de marqueur, prendre le header seulement
        head -20 "$file"
    fi
}

# === RAPPORT FINAL ===
show_unified_report() {
    local mode="$1"
    local chapter_range="$2"
    local duration="$3"
    local prompt_source="$4"

    local included="${SILK_CONTEXT_INCLUDED:-0}"
    local excluded="${SILK_CONTEXT_EXCLUDED:-0}"
    local output_file="${CONTEXT_OUTPUT_DIR}/${CONTEXT_UNIFIED_FILE}"

    echo
    log_success "üï∏Ô∏è Contexte unifi√© g√©n√©r√© en $duration"

    echo
    echo "üìä R√âSUM√â:"
    echo "   üìã Prompt: $prompt_source"
    echo "   üéØ Mode: $mode"
    echo "   üìñ Range: $chapter_range"
    echo "   ‚úÖ Chapitres inclus: $included"
    echo "   ‚ùå Chapitres exclus: $excluded"

    if [[ -f "$output_file" ]]; then
        local total_words=$(wc -w < "$output_file")
        local total_lines=$(wc -l < "$output_file")
        echo "   üìÑ Taille: $total_words mots, $total_lines lignes"
    fi

    echo
    echo "üìÅ FICHIER G√âN√âR√â:"
    echo "   üï∏Ô∏è $output_file"
    echo
    echo "üí° UTILISATION:"
    echo "   üìã Copiez tout le contenu dans votre LLM"
    echo "   ü§ñ Le prompt, contexte et manuscrit sont unifi√©s"
    echo "   ‚ö° Pr√™t pour interaction directe"

    if [[ "$chapter_range" == *","* ]]; then
        echo
        echo "üéØ CHAPITRES S√âLECTIONN√âS:"
        echo "   $(echo "$chapter_range" | tr ',' ' ')"
    fi

    echo
    echo "üï∏Ô∏è SILK has woven everything into one perfect file for your LLM!"
}

# === EXPORT FONCTIONS ===
export -f cmd_context
export -f show_context_help

# Marquer module comme charg√©
readonly SILK_COMMAND_CONTEXT_LOADED=true
