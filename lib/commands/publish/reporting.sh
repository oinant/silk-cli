#!/bin/bash
# lib/commands/publish/reporting.sh - Rapports et statistiques

# === RAPPORT SUCCESS ===
show_publish_success() {
    local output_file="$1"
    local filename="$2"
    local format="$3"
    local chapters_included="$4"
    local duration="$5"
    local french_quotes="$6"
    local auto_dashes="$7"
    local output_type="${8:-pdf}"

    echo
    log_success "üìö ${output_type^^} g√©n√©r√©: $output_file"

    echo
    echo "üìä R√âSUM√â PUBLICATION:"
    echo "   üìñ Fichier: $filename"
    echo "   üéØ Format: $format ($output_type)"
    echo "   üìö Chapitres: $chapters_included"
    echo "   üá´üá∑ Guillemets fran√ßais: $(if [[ "$french_quotes" == "true" ]]; then echo "OUI"; else echo "NON"; fi)"
    echo "   üí¨ Tirets automatiques: $(if [[ "$auto_dashes" == "true" ]]; then echo "OUI"; else echo "NON"; fi)"

    if [[ -f "$output_file" ]]; then
        # Calculer taille fichier
        if command -v stat &> /dev/null; then
            local file_size
            case "$(detect_os)" in
                "macos")
                    file_size=$(stat -f%z "$output_file" 2>/dev/null || echo "0")
                    ;;
                *)
                    file_size=$(stat -c%s "$output_file" 2>/dev/null || echo "0")
                    ;;
            esac
            local size_mb=$((file_size / 1024 / 1024))
            echo "   üìÅ Taille: ${size_mb}MB"
        fi
    fi

    echo
    echo "üìÅ FICHIER G√âN√âR√â:"
    echo "   üï∏Ô∏è $output_file"
    echo
    echo "üí° PROCHAINES √âTAPES:"
    echo "   üì± Test sur appareil cible"
    echo "   üñ®Ô∏è  Impression test si format book"
    echo "   üìß Partage avec b√™ta-lecteurs"
    echo
    echo "üï∏Ô∏è SILK has woven your manuscript into beautiful PDF!"
}

# === STATISTIQUES PROJET ===
generate_project_stats() {
    local output_format="${1:-console}"

    local total_chapters=0
    local total_words=0
    local total_files=0

    # Analyser tous les fichiers chapitres
    for file in 01-Manuscrit/Ch*.md; do
        if [[ -f "$file" ]] && grep -q "$MANUSCRIPT_SEPARATOR" "$file"; then
            ((total_files++))

            # Extraire num√©ro de chapitre
            local chapter_num=$(extract_chapter_number "$file")
            if [[ -n "$chapter_num" ]] && [[ "$chapter_num" -gt "$total_chapters" ]]; then
                total_chapters="$chapter_num"
            fi

            # Compter mots
            local words=$(sed -n "/${MANUSCRIPT_SEPARATOR}/,\$p" "$file" | tail -n +2 | wc -w)
            total_words=$((total_words + words))
        fi
    done

    case "$output_format" in
        "json")
            cat << EOF
{
    "project": "$(basename "$PWD")",
    "chapters": $total_chapters,
    "files": $total_files,
    "words": $total_words,
    "pages_estimated": $((total_words / 250)),
    "generated_at": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
}
EOF
            ;;
        "markdown")
            cat << EOF
# Statistiques Projet SILK

**Projet:** $(basename "$PWD")
**Chapitres:** $total_chapters
**Fichiers:** $total_files
**Mots:** $total_words
**Pages estim√©es:** $((total_words / 250))

*G√©n√©r√© le $(date '+%d/%m/%Y √† %H:%M:%S')*
EOF
            ;;
        *)
            echo "üìä STATISTIQUES PROJET:"
            echo "   Nom: $(basename "$PWD")"
            echo "   Chapitres: $total_chapters"
            echo "   Fichiers: $total_files"
            echo "   Mots: $total_words"
            echo "   Pages estim√©es: $((total_words / 250))"
            ;;
    esac
}

# === RAPPORT FORMATS DISPONIBLES ===
show_available_formats() {
    echo "üìã FORMATS SILK DISPONIBLES:"
    echo

    if [[ ! -d "formats" ]]; then
        echo "   ‚ùå R√©pertoire formats/ manquant"
        return 1
    fi

    local format_count=0

    for format_file in formats/*.yaml; do
        if [[ -f "$format_file" ]] && [[ "$(basename "$format_file")" != "base.yaml" ]]; then
            local format_name=$(basename "$format_file" .yaml)
            local output_type=$(detect_output_format "$format_name")

            # Extraire description si disponible
            local description=""
            if grep -q "^description:" "$format_file"; then
                description=$(grep "^description:" "$format_file" | cut -d: -f2- | xargs)
            fi

            printf "   %-12s [%s] %s\n" "$format_name" "$output_type" "$description"
            ((format_count++))
        fi
    done

    echo
    echo "   Total: $format_count formats disponibles"

    if [[ -f "formats/base.yaml" ]]; then
        echo "   ‚úÖ Template de base configur√©"
    else
        echo "   ‚ö†Ô∏è  Template de base manquant"
    fi
}

# === RAPPORT ERREURS PUBLICATION ===
show_publish_error_report() {
    local error_code="$1"
    local error_context="${2:-}"

    echo
    log_error "√âchec de la publication (code: $error_code)"
    echo

    case "$error_code" in
        1)
            echo "üîß DIAGNOSTIC:"
            echo "   ‚Ä¢ V√©rifiez la syntaxe des fichiers chapitres"
            echo "   ‚Ä¢ Assurez-vous que les s√©parateurs '${MANUSCRIPT_SEPARATOR}' sont pr√©sents"
            echo "   ‚Ä¢ V√©rifiez les permissions des r√©pertoires"
            ;;
        2)
            echo "üîß DIAGNOSTIC:"
            echo "   ‚Ä¢ Format non trouv√© dans le r√©pertoire formats/"
            echo "   ‚Ä¢ Cr√©ez le fichier formats/VOTRE_FORMAT.yaml"
            echo "   ‚Ä¢ Ou utilisez un format existant"
            ;;
        126|127)
            echo "üîß DIAGNOSTIC:"
            echo "   ‚Ä¢ D√©pendances manquantes (Pandoc ou XeLaTeX)"
            echo "   ‚Ä¢ Ex√©cutez: silk publish --dry-run"
            echo "   ‚Ä¢ Installez les d√©pendances requises"
            ;;
        *)
            echo "üîß DIAGNOSTIC:"
            echo "   ‚Ä¢ Erreur inconnue durant la publication"
            echo "   ‚Ä¢ V√©rifiez les logs avec: silk publish --debug"
            echo "   ‚Ä¢ Consultez la documentation SILK"
            ;;
    esac

    if [[ -n "$error_context" ]]; then
        echo
        echo "üí¨ CONTEXTE:"
        echo "   $error_context"
    fi

    echo
    echo "üí° AIDE:"
    echo "   ‚Ä¢ silk publish --help"
    echo "   ‚Ä¢ silk publish --dry-run"
    echo "   ‚Ä¢ Documentation: https://silk-cli.dev/docs"
}

# === VALIDATION PUBLICATION ===
validate_publication_output() {
    local output_file="$1"
    local expected_type="${2:-pdf}"

    if [[ ! -f "$output_file" ]]; then
        log_error "Fichier de sortie non cr√©√©: $output_file"
        return 1
    fi

    # V√©rifier taille minimale
    local file_size=$(stat -c%s "$output_file" 2>/dev/null || stat -f%z "$output_file" 2>/dev/null || echo "0")
    if [[ "$file_size" -lt 1024 ]]; then
        log_warning "Fichier de sortie tr√®s petit (${file_size} bytes)"
        return 2
    fi

    # V√©rification basique du type de fichier
    if command -v file &> /dev/null; then
        local file_type=$(file -b "$output_file" 2>/dev/null)
        case "$expected_type" in
            "pdf")
                if [[ ! "$file_type" =~ PDF ]]; then
                    log_warning "Le fichier ne semble pas √™tre un PDF valide"
                    return 3
                fi
                ;;
            "html")
                if [[ ! "$file_type" =~ HTML ]] && [[ ! "$file_type" =~ ASCII ]]; then
                    log_warning "Le fichier ne semble pas √™tre un HTML valide"
                    return 3
                fi
                ;;
            "epub")
                if [[ ! "$file_type" =~ ZIP ]] && [[ ! "$file_type" =~ EPUB ]]; then
                    log_warning "Le fichier ne semble pas √™tre un EPUB valide"
                    return 3
                fi
                ;;
        esac
    fi

    log_debug "Validation fichier de sortie: OK"
    return 0
}

# === M√âTRIQUES PERFORMANCE ===
show_performance_metrics() {
    local start_time="$1"
    local chapters_processed="$2"
    local words_processed="$3"
    local output_file="$4"

    local duration=$(end_timer "$start_time")
    local file_size_mb=0

    if [[ -f "$output_file" ]]; then
        local file_size=$(stat -c%s "$output_file" 2>/dev/null || stat -f%z "$output_file" 2>/dev/null || echo "0")
        file_size_mb=$((file_size / 1024 / 1024))
    fi

    echo
    echo "‚ö° M√âTRIQUES PERFORMANCE:"
    echo "   ‚è±Ô∏è  Dur√©e totale: ${duration}s"
    echo "   üìö Chapitres trait√©s: $chapters_processed"
    echo "   üìù Mots trait√©s: $words_processed"
    echo "   üíæ Taille finale: ${file_size_mb}MB"

    if [[ "$duration" -gt 0 ]]; then
        local words_per_second=$((words_processed / duration))
        echo "   üöÄ Vitesse: $words_per_second mots/seconde"
    fi
}

# === RAPPORT DIAGNOSTIC SYST√àME ===
show_system_diagnostic() {
    echo "üîß DIAGNOSTIC SYST√àME SILK PUBLISH:"
    echo

    # V√©rifier d√©pendances
    echo "üì¶ D√âPENDANCES:"
    if command -v pandoc &> /dev/null; then
        echo "   ‚úÖ Pandoc: $(pandoc --version | head -1)"
    else
        echo "   ‚ùå Pandoc: non install√©"
    fi

    if command -v xelatex &> /dev/null; then
        echo "   ‚úÖ XeLaTeX: $(xelatex --version | head -1)"
    else
        echo "   ‚ùå XeLaTeX: non install√©"
    fi

    # V√©rifier structure projet
    echo
    echo "üìÅ STRUCTURE PROJET:"
    if [[ -d "01-Manuscrit" ]]; then
        local chapter_files=$(find 01-Manuscrit -name "Ch*.md" | wc -l)
        echo "   ‚úÖ R√©pertoire manuscrit: $chapter_files fichiers"
    else
        echo "   ‚ùå R√©pertoire manuscrit: manquant"
    fi

    if [[ -d "formats" ]]; then
        local format_files=$(find formats -name "*.yaml" | wc -l)
        echo "   ‚úÖ R√©pertoire formats: $format_files templates"
    else
        echo "   ‚ùå R√©pertoire formats: manquant"
    fi

    # V√©rifier r√©pertoires de sortie
    echo
    echo "üì§ R√âPERTOIRES SORTIE:"
    for dir in "$PUBLISH_OUTPUT_DIR" "$PUBLISH_TEMP_DIR"; do
        if [[ -d "$dir" ]]; then
            local files_count=$(find "$dir" -type f | wc -l)
            echo "   ‚úÖ $dir: $files_count fichiers"
        else
            echo "   ‚ö†Ô∏è  $dir: n'existe pas (sera cr√©√©)"
        fi
    done

    # V√©rifier espace disque
    echo
    echo "üíæ ESPACE DISQUE:"
    if command -v df &> /dev/null; then
        local disk_usage=$(df -h . | tail -1 | awk '{print $4}')
        echo "   üìä Espace disponible: $disk_usage"
    fi
}

# === EXPORTS ===
export -f show_publish_success
export -f generate_project_stats
export -f show_available_formats
export -f show_publish_error_report
export -f validate_publication_output
export -f show_performance_metrics
export -f show_system_diagnostic

# Marquer module comme charg√©
readonly SILK_PUBLISH_REPORTING_LOADED=true
