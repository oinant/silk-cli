#!/bin/bash

# SILK - Smart Integrated Literary Kit v1.0
# Structured Intelligence for Literary Kreation
# Modern CLI workflow for authors with LLM integration
# Compatible: Git Bash (Windows), Linux, macOS, WSL

set -euo pipefail

# === CONFIGURATION GLOBALE ===
SILK_VERSION="1.0.0"
SILK_HOME="${SILK_HOME:-$HOME/.silk}"
SILK_CONFIG="$SILK_HOME/config"
VAULT_MARKER="## manuscrit"

# D√©tection du r√©pertoire lib/
SILK_SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SILK_LIB_DIR="${SILK_LIB_DIR:-$SILK_SCRIPT_DIR/lib}"

# === COULEURS ===
if [[ -t 1 ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m'
else
    RED='' GREEN='' YELLOW='' BLUE='' PURPLE='' CYAN='' NC=''
fi

# === FONCTIONS UTILITAIRES DE BASE ===
log_info() { echo -e "${BLUE}[INFO] $1${NC}"; }
log_success() { echo -e "${GREEN}[OK] $1${NC}"; }
log_warning() { echo -e "${YELLOW}[WARN] $1${NC}"; }
log_error() { echo -e "${RED}[ERROR] $1${NC}"; }
log_header() { echo -e "${PURPLE}[SILK] $1${NC}"; }
log_debug() {
    if [[ "${SILK_DEBUG:-false}" == "true" ]]; then
        echo -e "${CYAN}[DEBUG] $1${NC}" >&2
    fi
}

# === SYST√àME DE CHARGEMENT MODULAIRE ===
silk_module_loaded=()

load_module() {
    local module_path="$1"
    local module_file=""

    # R√©soudre le chemin du module
    if [[ "$module_path" == /* ]]; then
        # Chemin absolu
        module_file="$module_path"
    elif [[ "$module_path" == */* ]]; then
        # Chemin relatif depuis SILK_LIB_DIR
        module_file="$SILK_LIB_DIR/$module_path"
    else
        # Nom de module simple - chercher dans core/ puis commands/
        if [[ -f "$SILK_LIB_DIR/core/$module_path" ]]; then
            module_file="$SILK_LIB_DIR/core/$module_path"
        elif [[ -f "$SILK_LIB_DIR/commands/$module_path" ]]; then
            module_file="$SILK_LIB_DIR/commands/$module_path"
        else
            module_file="$SILK_LIB_DIR/$module_path"
        fi
    fi

    # V√©rifier existence
    if [[ ! -f "$module_file" ]]; then
        log_error "Module non trouv√©: $module_file"
        return 1
    fi

    # V√©rifier si d√©j√† charg√©
    local module_name=$(basename "$module_file")
    for loaded in "${silk_module_loaded[@]}"; do
        if [[ "$loaded" == "$module_name" ]]; then
            log_debug "Module d√©j√† charg√©: $module_name"
            return 0
        fi
    done

    # Charger le module
    log_debug "Chargement module: $module_file"

    if source "$module_file"; then
        silk_module_loaded+=("$module_name")
        log_debug "Module charg√© avec succ√®s: $module_name"
        return 0
    else
        log_error "Erreur lors du chargement: $module_file"
        return 1
    fi
}

load_core_modules() {
    local required_modules=(
        "utils.sh"
        "config.sh"
        "vault.sh"
        "templates.sh"
        "chapters.sh"
        "custom_html.sh"
    )

    log_debug "Chargement modules core..."

    for module in "${required_modules[@]}"; do
        if ! load_module "core/$module"; then
            log_error "Impossible de charger le module core requis: $module"
            log_error "V√©rifiez que $SILK_LIB_DIR/core/$module existe"
            return 1
        fi
    done

    log_debug "Modules core charg√©s avec succ√®s"
    return 0
}

load_command_module() {
    local command="$1"
    local module_file="commands/${command}.sh"

    log_debug "Chargement module commande: $command"

    if load_module "$module_file"; then
        return 0
    else
        log_error "Module commande non disponible: $command"
        log_error "V√©rifiez que $SILK_LIB_DIR/$module_file existe"
        return 1
    fi
}

# === D√âTECTION ENVIRONNEMENT ===
detect_os() {
    case "$OSTYPE" in
        msys*|cygwin*|mingw*) echo "windows" ;;
        darwin*) echo "macos" ;;
        linux*) echo "linux" ;;
        *) echo "unknown" ;;
    esac
}

check_silk_environment() {
    log_debug "V√©rification environnement SILK..."

    # V√©rifier r√©pertoire lib/
    if [[ ! -d "$SILK_LIB_DIR" ]]; then
        log_error "R√©pertoire lib/ non trouv√©: $SILK_LIB_DIR"
        log_error "SILK doit √™tre ex√©cut√© depuis son r√©pertoire d'installation"
        return 1
    fi

    # V√©rifier modules core essentiels
    local core_modules=("utils.sh" "config.sh" "vault.sh")
    for module in "${core_modules[@]}"; do
        if [[ ! -f "$SILK_LIB_DIR/core/$module" ]]; then
            log_error "Module core manquant: $SILK_LIB_DIR/core/$module"
            return 1
        fi
    done

    log_debug "Environnement SILK valide"
    return 0
}

# === GESTION CONFIGURATION (Version simplifi√©e pour bootstrap) ===
load_config() {
    mkdir -p "$SILK_HOME"
    if [[ -f "$SILK_CONFIG" ]]; then
        source "$SILK_CONFIG"
    fi

    # Valeurs par d√©faut
    SILK_DEFAULT_GENRE="${SILK_DEFAULT_GENRE:-polar-psychologique}"
    SILK_DEFAULT_LANGUAGE="${SILK_DEFAULT_LANGUAGE:-fr}"
    SILK_DEFAULT_TARGET_WORDS="${SILK_DEFAULT_TARGET_WORDS:-80000}"
    SILK_DEFAULT_CHAPTERS="${SILK_DEFAULT_CHAPTERS:-30}"
    SILK_DEFAULT_FORMAT="${SILK_DEFAULT_FORMAT:-digital}"
    SILK_AUTHOR_NAME="${SILK_AUTHOR_NAME:-}"
    SILK_AUTHOR_PSEUDO="${SILK_AUTHOR_PSEUDO:-}"
}

save_config() {
    cat > "$SILK_CONFIG" << EOF
# SILK Configuration - Smart Integrated Literary Kit
SILK_DEFAULT_GENRE="${SILK_DEFAULT_GENRE:-polar-psychologique}"
SILK_DEFAULT_LANGUAGE="${SILK_DEFAULT_LANGUAGE:-fr}"
SILK_DEFAULT_TARGET_WORDS="${SILK_DEFAULT_TARGET_WORDS:-80000}"
SILK_DEFAULT_CHAPTERS="${SILK_DEFAULT_CHAPTERS:-30}"
SILK_DEFAULT_FORMAT="${SILK_DEFAULT_FORMAT:-digital}"
SILK_AUTHOR_NAME="${SILK_AUTHOR_NAME:-}"
SILK_AUTHOR_PSEUDO="${SILK_AUTHOR_PSEUDO:-}"
EOF
}

# === COMMANDES INT√âGR√âES (pour compatibilit√©) ===
cmd_version() {
    echo "SILK v$SILK_VERSION"
    echo "Smart Integrated Literary Kit"
    echo "Structured Intelligence for Literary Kreation"
    echo ""
    echo "Architecture: Modulaire ($SILK_LIB_DIR)"
    echo "OS: $(detect_os)"
    echo "Modules charg√©s: ${#silk_module_loaded[@]}"
    return 0
}

cmd_config() {
    load_config

    case "${1:-list}" in
        --list|list)
            echo "üï∑Ô∏è SILK Configuration"
            echo "==================="
            echo "Genre par d√©faut        : ${SILK_DEFAULT_GENRE}"
            echo "Langue par d√©faut       : ${SILK_DEFAULT_LANGUAGE}"
            echo "Objectif mots d√©faut    : ${SILK_DEFAULT_TARGET_WORDS}"
            echo "Chapitres par d√©faut    : ${SILK_DEFAULT_CHAPTERS}"
            echo "Format par d√©faut       : ${SILK_DEFAULT_FORMAT}"
            echo "Nom auteur              : ${SILK_AUTHOR_NAME:-non d√©fini}"
            echo "Pseudonyme auteur       : ${SILK_AUTHOR_PSEUDO:-non d√©fini}"
            echo ""
            echo "üìÅ Fichier config       : $SILK_CONFIG"
            echo "üìö Modules SILK          : $SILK_LIB_DIR"
            ;;
        --set)
            if [[ $# -lt 2 ]] || [[ "$2" != *"="* ]]; then
                log_error "Format: silk config --set KEY=VALUE"
                return 1
            fi
            local key="${2%%=*}"
            local value="${2#*=}"

            case "$key" in
                SILK_AUTHOR_NAME) SILK_AUTHOR_NAME="$value" ;;
                SILK_DEFAULT_GENRE) SILK_DEFAULT_GENRE="$value" ;;
                SILK_DEFAULT_TARGET_WORDS) SILK_DEFAULT_TARGET_WORDS="$value" ;;
                *) log_error "Cl√© inconnue: $key"; return 1 ;;
            esac

            save_config
            log_success "Configuration mise √† jour: $key=$value"
            ;;
        --get)
            if [[ $# -lt 2 ]]; then
                log_error "Format: silk config --get KEY"
                return 1
            fi
            case "$2" in
                SILK_AUTHOR_NAME) echo "$SILK_AUTHOR_NAME" ;;
                SILK_DEFAULT_GENRE) echo "$SILK_DEFAULT_GENRE" ;;
                SILK_DEFAULT_TARGET_WORDS) echo "$SILK_DEFAULT_TARGET_WORDS" ;;
                *) log_error "Cl√© inconnue: $2"; return 1 ;;
            esac
            ;;
        --help|-h)
            show_config_help
            ;;
        *)
            log_error "Option inconnue: $1"
            show_config_help
            return 1
            ;;
    esac
}

show_config_help() {
    cat << 'HELP'
‚öôÔ∏è SILK CONFIG - Configuration globale

USAGE:
  silk config [OPTIONS]

OPTIONS:
  --list                    Afficher configuration (d√©faut)
  --set KEY=VALUE          D√©finir une configuration
  --get KEY                Afficher une configuration
  -h, --help               Afficher cette aide

EXEMPLES:
  silk config --list
  silk config --set SILK_AUTHOR_NAME="Jane Doe"
  silk config --get SILK_DEFAULT_GENRE

CL√âS DISPONIBLES:
  SILK_AUTHOR_NAME         Nom de l'auteur
  SILK_DEFAULT_GENRE       Genre par d√©faut
  SILK_DEFAULT_TARGET_WORDS Objectif mots par d√©faut
HELP
}

# === COMMANDES MODULAIRES ===
execute_modular_command() {
    local command="$1"
    shift  # Enlever le nom de la commande des arguments

    log_debug "Ex√©cution commande modulaire: $command"

    # Charger le module de la commande
    if ! load_command_module "$command"; then
        log_error "Commande '$command' non disponible"
        log_error "Module $SILK_LIB_DIR/commands/${command}.sh manquant"
        echo ""
        echo "üí° Commandes disponibles:"
        echo "   version    - Afficher version SILK"
        echo "   config     - Configuration globale"
        echo ""
        echo "üöß Commandes en d√©veloppement:"
        echo "   init       - Cr√©er nouveau projet"
        echo "   context    - G√©n√©rer contexte LLM"
        echo "   wordcount  - Statistiques progression"
        echo "   publish    - G√©n√©rer PDF"
        return 1
    fi

    # V√©rifier que la fonction de commande existe
    local cmd_function="cmd_${command}"
    if ! declare -f "$cmd_function" > /dev/null; then
        log_error "Fonction $cmd_function non trouv√©e dans le module"
        return 1
    fi

    # Ex√©cuter la commande
    log_debug "Appel fonction: $cmd_function"
    "$cmd_function" "$@"
}

# === AIDE G√âN√âRALE ===
show_help() {
    log_header "SILK - Smart Integrated Literary Kit v$SILK_VERSION"
    echo
    echo "CLI unifi√© pour l'√©criture de romans avec int√©gration LLM"
    echo "Architecture modulaire - Structured Intelligence for Literary Kreation"
    echo
    echo "USAGE:"
    echo "  silk COMMAND [OPTIONS]"
    echo
    echo "COMMANDES DISPONIBLES:"
    echo "  version     Afficher version et informations syst√®me"
    echo "  config      Configuration globale SILK"
    echo
    echo "COMMANDES MODULAIRES:"

    # Lister les modules de commandes disponibles
    local available_commands=()
    if [[ -d "$SILK_LIB_DIR/commands" ]]; then
        while IFS= read -r -d '' file; do
            local cmd_name=$(basename "$file" .sh)
            available_commands+=("$cmd_name")
        done < <(find "$SILK_LIB_DIR/commands" -name "*.sh" -print0 2>/dev/null)
    fi

    if [[ ${#available_commands[@]} -gt 0 ]]; then
        for cmd in "${available_commands[@]}"; do
            case "$cmd" in
                init) echo "  init        Cr√©er un nouveau projet d'√©criture" ;;
                context) echo "  context     G√©n√©rer contexte pour LLM (Claude, GPT, etc.)" ;;
                wordcount) echo "  wordcount   Statistiques progression manuscrit" ;;
                publish) echo "  publish     G√©n√©rer PDF du manuscrit" ;;
                *) echo "  $cmd        Module de commande disponible" ;;
            esac
        done
    else
        echo "  (Aucun module de commande trouv√© dans $SILK_LIB_DIR/commands/)"
    fi

    echo
    echo "OPTIONS GLOBALES:"
    echo "  -h, --help  Afficher aide"
    echo "  --debug     Mode debug avec logs d√©taill√©s"
    echo
    echo "EXEMPLES:"
    echo "  silk version                        # Informations syst√®me"
    echo "  silk config --list                  # Voir configuration"
    echo "  silk init \"Mon Roman\"              # Nouveau projet (si module dispo)"
    echo "  silk context \"R√©vision ch15\"       # Contexte LLM (si module dispo)"
    echo
    echo "ENVIRONNEMENT:"
    echo "  Modules     : $SILK_LIB_DIR"
    echo "  Config      : $SILK_CONFIG"
    echo "  OS          : $(detect_os)"
    echo
    echo "üï∑Ô∏è SILK weaves your story together."
}

# === GESTION ERREURS AVANC√âE ===
handle_silk_error() {
    local exit_code=$1
    local line_number=$2
    local command="$3"

    log_error "Erreur SILK d√©tect√©e"
    log_error "Code sortie: $exit_code"
    log_error "Ligne: $line_number"
    log_error "Commande: $command"

    if [[ "${SILK_DEBUG:-false}" == "true" ]]; then
        echo "=== DEBUG INFO ===" >&2
        echo "Modules charg√©s: ${silk_module_loaded[*]}" >&2
        echo "SILK_LIB_DIR: $SILK_LIB_DIR" >&2
        echo "PWD: $PWD" >&2
        echo "=================" >&2
    fi

    exit $exit_code
}

# === POINT D'ENTR√âE PRINCIPAL ===
main() {
    # Gestion des options globales
    while [[ $# -gt 0 ]]; do
        case $1 in
            --debug)
                export SILK_DEBUG=true
                log_debug "Mode debug activ√©"
                shift
                ;;
            -h|--help|help)
                show_help
                exit 0
                ;;
            -*)
                log_error "Option globale inconnue: $1"
                echo "Utilisez 'silk --help' pour voir les options disponibles"
                exit 1
                ;;
            *)
                # C'est une commande, arr√™ter le parsing des options globales
                break
                ;;
        esac
    done

    # V√©rification environnement
    if ! check_silk_environment; then
        log_error "Environnement SILK invalide"
        exit 1
    fi

    # Charger configuration
    load_config

    # Charger modules core
    if ! load_core_modules; then
        log_warning "Modules core non disponibles, fonctionnalit√© limit√©e"
    fi

    # Installer trap pour gestion d'erreurs
    trap 'handle_silk_error $? $LINENO "$BASH_COMMAND"' ERR

    # Parse commande principale
    local command="${1:-}"
    if [[ -z "$command" ]]; then
        show_help
        exit 0
    fi

    shift  # Enlever la commande des arguments

    case "$command" in
        version)
            cmd_version
            ;;
        config)
            cmd_config "$@"
            ;;
        init|context|wordcount|publish)
            execute_modular_command "$command" "$@"
            ;;
        *)
            log_error "Commande inconnue: $command"
            echo ""
            echo "üí° Commandes disponibles: version, config"
            echo "   Utilisez 'silk --help' pour plus d'informations"
            exit 1
            ;;
    esac
}

# === EXPORT VARIABLES GLOBALES ===
export SILK_VERSION SILK_HOME SILK_CONFIG SILK_LIB_DIR VAULT_MARKER
export -f log_info log_success log_warning log_error log_header log_debug
export -f load_module detect_os

# Ex√©cution si script appel√© directement
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
