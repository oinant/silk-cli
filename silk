#!/bin/bash

# üï∑Ô∏è SILK - Smart Integrated Literary Kit v1.0
# Structured Intelligence for Literary Kreation
# Modern CLI workflow for authors with LLM integration
# Compatible: Git Bash (Windows), Linux, macOS

set -euo pipefail

# === FIX COMPATIBILIT√â WINDOWS/WSL ===
# Convertir fins de ligne si n√©cessaire (Windows/WSL)
if command -v dos2unix &> /dev/null && [[ -f "$0" ]]; then
    # V√©rifier si le script a des CRLF et les convertir silencieusement
    if file "$0" 2>/dev/null | grep -q "CRLF"; then
        dos2unix "$0" 2>/dev/null || true
    fi
fi

# D√©tecter l'environnement d'ex√©cution
detect_environment() {
    if [[ -n "${WSL_DISTRO_NAME:-}" ]]; then
        echo "wsl"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "mingw"* ]]; then
        echo "gitbash"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        echo "linux"
    elif [[ "$OSTYPE" == "darwin"* ]]; then
        echo "macos"
    else
        echo "unknown"
    fi
}

SILK_ENV=$(detect_environment)

# === CONFIGURATION GLOBALE ===
SILK_VERSION="1.0.0"
SILK_HOME="${SILK_HOME:-$HOME/.silk}"
SILK_CONFIG="$SILK_HOME/config"
SILK_LIB_DIR="${SILK_LIB_DIR:-$(dirname "${BASH_SOURCE[0]}")/lib}"
VAULT_MARKER="## manuscrit"

# === D√âTECTION ARCHITECTURE ===
# Si lib/ existe en local, utiliser version locale
if [[ -d "$(dirname "${BASH_SOURCE[0]}")/lib" ]]; then
    SILK_LIB_DIR="$(dirname "${BASH_SOURCE[0]}")/lib"
# Sinon utiliser installation syst√®me
elif [[ -d "/usr/local/lib/silk" ]]; then
    SILK_LIB_DIR="/usr/local/lib/silk"
elif [[ -d "$HOME/.silk/lib" ]]; then
    SILK_LIB_DIR="$HOME/.silk/lib"
fi

# === CHARGEMENT MODULES ===
# Fonction de chargement s√©curis√©
load_module() {
    local module="$1"
    local module_path="$SILK_LIB_DIR/$module"
    
    if [[ -f "$module_path" ]]; then
        source "$module_path"
        return 0
    else
        echo "‚ùå Module SILK manquant: $module" >&2
        echo "üí° R√©pertoire attendu: $SILK_LIB_DIR" >&2
        return 1
    fi
}

# Charger modules core
load_module "core/utils.sh" || exit 1
load_module "core/config.sh" || exit 1
load_module "core/vault.sh" || exit 1

# === COULEURS ===
if [[ -t 1 ]]; then
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    PURPLE='\033[0;35m'
    CYAN='\033[0;36m'
    NC='\033[0m'
else
    RED='' GREEN='' YELLOW='' BLUE='' PURPLE='' CYAN='' NC=''
fi

# === FONCTIONS UTILITAIRES DE BASE ===
log_info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
log_success() { echo -e "${GREEN}‚úÖ $1${NC}"; }
log_warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }
log_error() { echo -e "${RED}‚ùå $1${NC}"; }
log_header() { echo -e "${PURPLE}üï∑Ô∏è  $1${NC}"; }

# === AIDE G√âN√âRALE ===
show_help() {
    cat << EOF
$(log_header "SILK v$SILK_VERSION - Smart Integrated Literary Kit")
${CYAN}Structured Intelligence for Literary Kreation${NC}

Modern CLI workflow for authors with LLM integration

USAGE:
  silk COMMAND [OPTIONS]

CORE COMMANDS:
  init        Cr√©er un nouveau projet litt√©raire
  context     G√©n√©rer contexte optimis√© pour LLM 
  wordcount   Statistiques progression manuscrit
  publish     G√©n√©rer PDF professionnel multi-format
  config      Configuration globale SILK
  version     Afficher version

OPTIONS GLOBALES:
  -h, --help  Afficher aide (pour commande: silk COMMAND --help)
  
EXEMPLES SILK:
  silk init "L'Araign√©e"                # Nouveau projet polar
  silk context "R√©vision Emma" -ch 15   # Contexte LLM chapitre 15
  silk wordcount 100000                 # Stats avec objectif 100k
  silk publish -f iphone                # PDF format iPhone

WORKFLOW SILK:
  1. silk init "Mon Projet"             # üï∑Ô∏è Tisser la structure
  2. [√âcrire dans 01-Manuscrit/]        # ‚úçÔ∏è  R√©daction avec ## manuscrit
  3. silk wordcount                     # üìä Suivre progression  
  4. silk context "Question LLM"        # ü§ñ Analyser avec IA
  5. silk publish                       # üìñ G√©n√©rer PDF final

PHILOSOPHIE SILK:
  Smart      Templates adapt√©s genre et march√©
  Integrated Workflow unifi√© conception‚Üípublication  
  Literary   Focus sur fiction sophistiqu√©e
  Kit        Bo√Æte √† outils compl√®te auteur

SILK weaves together all elements of your novel
like a spider weaves its web.

Pour commencer: silk init --help
Documentation: https://github.com/oinant/silk-cli
EOF
}

# === DISPATCH COMMANDES ===
dispatch_command() {
    local command="$1"
    shift
    
    case "$command" in
        init)
            load_module "commands/init.sh" || return 1
            cmd_init "$@"
            ;;
        context)
            load_module "commands/context.sh" || return 1
            cmd_context "$@"
            ;;
        wordcount|wc)
            load_module "commands/wordcount.sh" || return 1
            cmd_wordcount "$@"
            ;;
        publish|pdf)
            load_module "commands/publish.sh" || return 1
            cmd_publish "$@"
            ;;
        config)
            load_module "commands/config.sh" || return 1
            cmd_config "$@"
            ;;
        debug)
            load_module "commands/debug.sh" || return 1
            cmd_debug "$@"
            ;;
        version)
            echo "üï∑Ô∏è SILK v$SILK_VERSION - Smart Integrated Literary Kit"
            echo "Structured Intelligence for Literary Kreation"
            echo "https://github.com/oinant/silk-cli"
            echo "üìÅ Modules: $SILK_LIB_DIR"
            ;;
        -h|--help|help|"")
            show_help
            ;;
        *)
            log_error "Commande SILK inconnue: $command"
            echo "üí° Utilisez 'silk --help' pour voir les commandes disponibles"
            echo "üï∏Ô∏è SILK weaves intelligence into literary creation"
            return 1
            ;;
    esac
}

# === VALIDATION ENVIRONNEMENT ===
validate_environment() {
    # V√©rifier version Bash
    if [[ "${BASH_VERSION%%.*}" -lt 4 ]]; then
        log_warning "Bash 4.0+ recommand√© (actuel: $BASH_VERSION)"
    fi
    
    # V√©rifier r√©pertoire modules
    if [[ ! -d "$SILK_LIB_DIR" ]]; then
        log_error "R√©pertoire modules SILK non trouv√©: $SILK_LIB_DIR"
        echo "üí° Solutions:"
        echo "   - Installation compl√®te: curl -sSL install-url | bash"
        echo "   - Variable SILK_LIB_DIR pointant vers lib/"
        return 1
    fi
    
    # Initialisation premi√®re utilisation
    if [[ ! -f "$SILK_CONFIG" ]]; then
        log_info "Premi√®re utilisation SILK - initialisation..."
        mkdir -p "$SILK_HOME"
        if silk_config_init; then
            log_success "Configuration SILK initialis√©e"
        else
            log_warning "Impossible d'initialiser la configuration"
        fi
    fi
    
    return 0
}

# === POINT D'ENTR√âE PRINCIPAL ===
main() {
    # Validation environnement
    validate_environment || exit 1
    
    # Chargement configuration
    silk_config_load || {
        log_warning "Impossible de charger la configuration"
    }
    
    # Dispatch commande
    if [[ $# -eq 0 ]]; then
        show_help
    else
        dispatch_command "$@"
    fi
}

# === GESTION SIGNAUX ===
trap 'echo "üï∑Ô∏è SILK interrupted - web partially woven"; exit 130' INT
trap 'echo "üï∏Ô∏è SILK terminated gracefully"; exit 143' TERM

# === EX√âCUTION ===
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi

# === SILK SIGNATURE ===
# üï∑Ô∏è SILK v1.0.0 - Smart Integrated Literary Kit
# Structured Intelligence for Literary Kreation  
# Built with ‚ù§Ô∏è by authors, for authors
# SILK weaves your story together